var ilib=require("./ilib.js");var Utils=require("./Utils.js");var Locale=require("./Locale.js");var IString=require("./IString.js");var StringMapper=function(options){var sync=true,loadParams=undefined;this.locale=new Locale();this.mapData={};this.mapFunction=undefined;if(options){if(typeof options.locale!=="undefined"){this.locale=typeof options.locale==="string"?new Locale(options.locale):options.locale}if(typeof options.name!=="undefined"){this.name=options.name}if(typeof options.mapFunction==="function"){this.mapFunction=options.mapFunction}if(typeof options.sync!=="undefined"){sync=options.sync==true}if(typeof options.loadParams!=="undefined"){loadParams=options.loadParams}}if(!StringMapper.cache){StringMapper.cache={}}Utils.loadData({object:StringMapper,locale:this.locale,name:this.name+".json",sync:sync,loadParams:loadParams,callback:ilib.bind(this,function(map){if(!map){var spec=this.locale.getSpec().replace(/-/g,"_");StringMapper.cache[spec]={}}this.mapData=map||{};if(options&&typeof options.onLoad==="function"){options.onLoad(this)}})})};StringMapper.prototype={getLocale:function(){return this.locale},getName:function(){return this.name},map:function(string){var input;if(!string){return string}if(typeof string==="string"){input=new IString(string)}else{input=string.toString()}var ret="";var it=input.charIterator();var c;while(it.hasNext()){c=it.next();if(this.mapData&&this.mapData[c]){ret+=this.mapData[c]}else if(this.mapFunction){ret+=this.mapFunction(c)}else{ret+=c}}return ret}};module.exports=StringMapper;